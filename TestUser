import junit.framework.TestCase;
import org.junit.Before;
import org.junit.Test;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;


class UserConcurrency implements Runnable {
    int teacherOrStudent;
    String userId;
    String password;
    String action;
    String newUserId;
    String newPassword;

    public UserConcurrency(int teacherOrStudent, String userId, String password, String action) {
        this.teacherOrStudent = teacherOrStudent;
        this.userId = userId;
        this.password = password;
        this.action = action;
    }

    public UserConcurrency(int teacherOrStudent, String userId, String password, String newUserId, String newPassword, String action) {
        this.teacherOrStudent = teacherOrStudent;
        this.userId = userId;
        this.password = password;
        this.newUserId = newUserId;
        this.newPassword = newPassword;
        this.action = action;
    }

    public void run() {
        try {
            switch (action) {
                case "create":
                    System.out.println(Thread.currentThread() + String.format("Creating  user id <%s> password <%s> ", userId, password));
                    User.createAccount(teacherOrStudent, userId, password);
                    break;
                case "delete":
                    System.out.println(Thread.currentThread() + String.format("Deleting  user id <%s>", userId));
                    User.deleteAccount(teacherOrStudent, userId, password);
                    break;
                case "edit":
                    System.out.println(Thread.currentThread() + String.format("Editing  user id <%s>", userId));
                    User.editAccount(teacherOrStudent, userId, password, newUserId, newPassword);
                    break;

                default:
                    break;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}



public class TestUser extends TestCase {

    @Before()
    public void testSetup() {
        File studentFile = new File( "src/StudentUsernames.txt");
        if(studentFile.exists()) {
            studentFile.delete();
            System.out.println( " Removing students file for unit testing..");
        }
        File teachersFile = new File( "src/TeacherUsernames.txt");
        if( teachersFile.exists()) {
            teachersFile.delete();
            System.out.println( " Removing teachers file for unit testing..");
        }
    }


    @Test(timeout = 1000)
    public void testUserCreationSuccess() {
        System.out.println("============Testing Begin" + getName());
        try {
            boolean returnStatus = User.createAccount( 1, "SM1", "P123");

            assertTrue( "New user creation.. " , returnStatus);
            User.deleteAccount( 1, "SM1", "P123");
            System.out.println("============Testing end" + getName());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test(timeout = 1000)
    public void testUserCreationFailure() {
        System.out.println("============Testing Begin" + getName());
        try {
            System.out.println("Testing " + getName());
            boolean returnStatus = User.createAccount( 1, "SM2", "P123");
            assertTrue( "New user creation.. " , returnStatus);
            boolean retStatus = User.createAccount( 1, "SM2", "P123");
            assertFalse("Duplicate users.. Failed to create", retStatus );
            User.deleteAccount( 1, "SM2", "P123");
            System.out.println("============Testing end" + getName());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test(timeout = 100)
    public void testUserSignInSuccess() {
        System.out.println("============Testing Begin" + getName());
        try {
            System.out.println("Testing " + getName());
            User.createAccount( 1, "SM3", "P123");
            boolean returnStatus = User.signIn( 1, "SM3", "P123");
            assertTrue( "User signedin.. " , returnStatus);
            User.deleteAccount( 1, "SM3", "P123");
            System.out.println("============Testing end" + getName());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test(timeout = 100)
    public void testUserSignInFailure() {
        System.out.println("============Testing Begin" + getName());
        try {
            System.out.println("Testing " + getName());
            boolean returnStatus = User.signIn( 1, "SSM2", "P123");
            assertFalse( "Wrong user sign " , returnStatus);
            System.out.println("============Testing end" + getName());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test(timeout = 100)
    public void testUserModification() {
        System.out.println("============Testing Begin" + getName());
        try {
            User.createAccount( 1, "SM4", "P123");
            boolean returnStatus = User.editAccount( 1, "SM4", "P123", "SSM4", "P123");
            assertTrue( "User modified " , returnStatus);
            User.deleteAccount( 1, "SSM4", "P123");
            System.out.println("============Testing end" + getName());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test(timeout = 100)
    public void testUserDeletion() {
        System.out.println("============Testing Begin" + getName());
        try {
            User.createAccount( 1, "SM4", "P123");
            boolean returnStatus = User.deleteAccount( 1, "SM4", "P123" );
            assertTrue( "User deleted " , returnStatus);
            User.deleteAccount( 1, "SM4", "P123");
            System.out.println("============Testing end" + getName());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    public void testAllUsersAreDeleted() {
        System.out.println("============Testing Begin" + getName());
        try {
            assertFalse( User.deleteAccount( 1, "SM1", "P123" ));
            assertFalse(User.deleteAccount( 1, "SM09", "P123" ));
            assertFalse(User.deleteAccount( 1, "SM08", "P123" ));
            assertFalse(User.deleteAccount( 1, "SM3", "P123" ));
            assertFalse(User.deleteAccount( 1, "SM2", "P123" ));
            assertFalse(User.deleteAccount( 1, "SM4", "P123" ));
            System.out.println("============Testing end" + getName());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }



    public void testUserConcurrentRequests() {
        System.out.println("============Testing Begin" + getName());

        //-- Create 5 accounts..
        Thread createOneT = new Thread( new UserConcurrency(1, "SM01", "P123", "create") );
        createOneT.start();
        Thread createTwoT = new Thread( new UserConcurrency(1, "SM02", "P123", "create") );
        createTwoT.start();
        Thread createThreeT = new Thread( new UserConcurrency(1, "SM03", "P123", "create") );
        createThreeT.start();
        Thread createFourT = new Thread( new UserConcurrency(1, "SM04", "P123", "create") );
        createFourT.start();
        Thread createFiveT = new Thread( new UserConcurrency(1, "SM05", "P123", "create") );
        createFiveT.start();
        try {
            createOneT.join();
            createTwoT.join();
            createThreeT.join();
            createFourT.join();
            createFiveT.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        //-- Verify student file has 5 lines
        Path studentFiles = Path.of( "src/StudentUsernames.txt" );
        try {
            long lineCount = Files.lines(studentFiles).count();
            assertEquals( "Expected line count of 5 ", 5, lineCount );
        } catch (IOException e) {
            e.printStackTrace();
        }

        //-- Delete all of the accounts
        Thread createOneTD = new Thread( new UserConcurrency(1, "SM01", "P123", "delete") );
        createOneTD.start();
        Thread createTwoTD = new Thread( new UserConcurrency(1, "SM02", "P123", "delete") );
        createTwoTD.start();
        Thread createThreeTD = new Thread( new UserConcurrency(1, "SM03", "P123", "delete") );
        createThreeTD.start();
        Thread createFourTD = new Thread( new UserConcurrency(1, "SM04", "P123", "delete") );
        createFourTD.start();
        Thread createFiveTD = new Thread( new UserConcurrency(1, "SM05", "P123", "delete") );
        createFiveTD.start();
        try {
            createOneTD.join();
            createTwoTD.join();
            createThreeTD.join();
            createFourTD.join();
            createFiveTD.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

//        -- Verify student file is empty..
        Path studentFile = Path.of( "src/StudentUsernames.txt" );
        try {
            String fileContents = Files.readString( studentFile );
            assertTrue( "Concurrent creation/deletion count match ", ( fileContents.length() == 0 ));
        } catch (IOException e) {
            e.printStackTrace();
        }


    }

}
